{"componentChunkName":"component---src-components-post-tsx","path":"/blog/reactNativeUnstatedNext","result":{"data":{"contentfulBlog":{"title":"React Native + Unstated Nextで手軽に状態管理する","publishedDate":"September 22nd, 2021","description":"React Native + Unstated Nextで手軽に状態管理する","body":{"childMarkdownRemark":{"html":"<p>最近個人開発で<a href=\"https://apps.apple.com/jp/app/muscle-note/id1585741817\">Muscle Note（マッスルノート）</a>というiOSアプリをReact Nativeで作りました。</p>\n<p>その際の状態管理に<code class=\"language-text\">Redux</code>等の有名ライブラリではなく、<code class=\"language-text\">Unstated Next</code>という超軽量状態管理ライブラリを使ってみたところ開発体験がとても良かったので今回ぼくが用いた手法をシェアします。</p>\n<br />\n<h2>Unstated Next</h2>\n<p><code class=\"language-text\">Unstated Next</code>は一言で言えば「グローバルな状態をhooksを用いて管理する」ライブラリです。</p>\n<p><code class=\"language-text\">Unstated Next</code>の中身は<code class=\"language-text\">CreateContext</code>hooksをさらに<code class=\"language-text\">Container</code>という独自の概念で包括しただけで、<code class=\"language-text\">Container</code>の<code class=\"language-text\">Provider</code>で子コンポーネントをラップすればそれ以下の孫・ひ孫コンポーネント問わずどこからでもhooksの値にアクセス・更新することができます。</p>\n<p>具体的な使用方法ですが、今回は<code class=\"language-text\">User</code>という独自のEntityを定義し、そちらを用いて紹介します。</p>\n<p>まずは適当に<code class=\"language-text\">User</code>型の定義と、<code class=\"language-text\">User</code>の<code class=\"language-text\">initialState</code>を定義します。</p>\n<div class=\"gatsby-code-title your-custom-class-name\">src/entity/user.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  uid<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> initialUser<span class=\"token operator\">:</span> User <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  uid<span class=\"token operator\">:</span> uuid<span class=\"token punctuation\">.</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'hoge太郎'</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<br />\n<p>次に、上記で定義した<code class=\"language-text\">User</code>を更新するカスタムhooksを作り、それを<code class=\"language-text\">unstated next</code>で提供される<code class=\"language-text\">createContainer</code>という関数でラップします。</p>\n<div class=\"gatsby-code-title your-custom-class-name\">src/container/userContaienr.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">,</span> setUser<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>initialUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> Partial<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>user<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>val <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> user<span class=\"token punctuation\">,</span> setUser<span class=\"token punctuation\">,</span> updateUser <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> UserContainer <span class=\"token operator\">=</span> <span class=\"token function\">createContainer</span><span class=\"token punctuation\">(</span>useUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<br />\n<p>最後に、上記で作成した<code class=\"language-text\">UserContainer</code>で、<code class=\"language-text\">App.tsx</code>をラップします。</p>\n<div class=\"gatsby-code-title your-custom-class-name\">App.tsx</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>UserContainer<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>UserComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>UserContainer<span class=\"token operator\">></span>\n\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<br />\n<p><code class=\"language-text\">UserComponent</code>内では以下のようにして呼び出します。</p>\n<div class=\"gatsby-code-title your-custom-class-name\">src/UserComponent.tsx</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">\n<span class=\"token keyword\">const</span> UserComponent<span class=\"token operator\">:</span> <span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span> <span class=\"token operator\">=</span> prosp <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user<span class=\"token punctuation\">,</span> updateUser<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useContainer</span><span class=\"token punctuation\">(</span>UserContainer<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">...</span>省略\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<br />\n<p>これだけです。超簡単です。</p>\n<h2>Unstated Nextを永続化する</h2>\n<p>まずは永続層を定義します。今回は<code class=\"language-text\">react-native-storage</code>というライブラリを用いて以下のように宣言します。</p>\n<div class=\"gatsby-code-title your-custom-class-name\">src/storage.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">\n<span class=\"token keyword\">import</span> Storage <span class=\"token keyword\">from</span> <span class=\"token string\">'react-native-storage'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AsyncStorage <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-native'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> storage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Storage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  size<span class=\"token operator\">:</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span>\n  storageBackend<span class=\"token operator\">:</span> AsyncStorage<span class=\"token punctuation\">,</span>\n  defaultExpires<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  enableCache<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<br />\n<p>次に状態の更新ですが、<code class=\"language-text\">useEffect</code>の<code class=\"language-text\">dps</code>に<code class=\"language-text\">user</code>プロパティを付与することで、<code class=\"language-text\">user</code>に変更があった際に永続層に保存されるようにします。</p>\n<div class=\"gatsby-code-title your-custom-class-name\">src/container/userContaienr.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    storage<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        key<span class=\"token operator\">:</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token operator\">:</span> user<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<br />\n<p>これで、グローバルhooksが更新される度に永続層も同期的に更新されます。\nまた、アプリ起動時の永続層からのデータの読み込みも、同じく<code class=\"language-text\">useEffect</code>を用い<code class=\"language-text\">dps</code>に空配列を渡すことでアプリ起動時だけ呼ばれる処理を定義します。</p>\n<div class=\"gatsby-code-title your-custom-class-name\">src/container/userContaienr.ts</div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    storage<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'user'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<br />\n<p>終わり。</p>\n<h2>ps</h2>\n<p>こちらが上記手法を用いて作った<a href=\"https://apps.apple.com/jp/app/muscle-note/id1585741817\">Muscle Note（マッスルノート）</a>というアプリです。ぜひ使っていただけると嬉しいです。</p>"}}}},"pageContext":{"slug":"reactNativeUnstatedNext","topic":"ContentfulBlogEdge","prev":null,"next":{"slug":"struggle-is-real","title":"新卒プログラマーがエンジニアリングと人生について考える","publishedDate":"2021-05-21T02:14+09:00"}}},"staticQueryHashes":["1271460761","2433757943","3000541721","3159585216"]}