{"componentChunkName":"component---src-components-post-tsx","path":"/tech/fibonacci-matrx-python","result":{"data":{"contentfulTech":{"title":"【Python】行列を使ってフィボナッチ数を対数時間で解く","publishedDate":"April 28th, 2021","description":"フィボナッチ数列のN項目を計算量O(log N)で解く方法の解説","body":{"childMarkdownRemark":{"html":"<h2>フィボナッチ数列とは</h2>\n<br>\n<p>フィボナッチ数列は以下のような漸化式で表される数列のこと。</p>\n<br>\n<div class=\"math math-display\">F_1 = F_2 = 1 \\\\\nF_{n + 2} = F_{n + 1} + F_n</div>\n<br>\n<p>再帰的な構造を持つことからプログラミング初学者の間でよく解かされがちなので、皆さんも一度は見た事があるだろう。</p>\n<p>Pythonで再帰関数を用いてフィボナッチ数列の<span class=\"math math-inline\">N</span>項目を求めるには、次のように書く。</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">\n<span class=\"token keyword\">def</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">return</span> fib<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<p>しかし、この方法だと指数関数的に計算量が増加し非効率なアルゴリズムであるため、メモ化というアルゴリズムを用いる。</p>\n<br>\n<h2>メモ化再帰</h2>\n<br>\n<p>メモ化とは計算結果を保存しておいて、その数値が必要になった際に都度計算し直すのではなくその数値を参照するという手法で、\nこの手法を用いれば計算量は<span class=\"math math-inline\">O(N^2)</span>から<span class=\"math math-inline\">O(N)</span>まで減らす事ができる。</p>\n<p>Pythonでメモ化を用いる際は、関数の前に<code class=\"language-text\">@lru_cache</code>と書くだけで自動でやってくれる。</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">\n<span class=\"token decorator annotation punctuation\">@lru_cache</span><span class=\"token punctuation\">(</span>max_size<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">return</span> fib<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<br>\n<p>ここら辺までが大体私が大学でアルゴリズムとデータ構造の授業を履修した際に習った事なのだが、\n行列を使えば実はもっと高速に（具体的には対数時間で）フィボナッチ数列の<span class=\"math math-inline\">N</span>項目を求める事ができる。</p>\n<br>\n<h2>フィボナッチ数列を行列式で求める</h2>\n<br>\n<p>フィボナッチ数列は、行列を用いて次のように表す事ができる。</p>\n<br>\n<div class=\"math math-display\">\\left(\n\\begin{matrix} \n1 &#x26; 1 \\\\ \n1 &#x26; 0 \n\\end{matrix}\n\\right)^n\n = \n\\left(\n\\begin{matrix} \nF_{n+1} &#x26; F_n \\\\ \nF_n &#x26; F_{n-1} \n\\end{matrix}\n\\right)</div>\n<br>\n<p>上記の性質は、帰納法を用いれば簡単に証明できる。</p>\n<br>\n<div class=\"math math-display\">\\left(\n\\begin{matrix} \n1 &#x26; 1 \\\\ \n1 &#x26; 0 \n\\end{matrix}\n\\right)^{n + 1}\n = \n\\left(\n\\begin{matrix} \n1 &#x26; 1 \\\\ \n1 &#x26; 0 \n\\end{matrix}\n\\right)^{n}\n\\left(\n\\begin{matrix} \n1 &#x26; 1 \\\\ \n1 &#x26; 0 \n\\end{matrix}\n\\right) \\\\\n\n=\n\\left(\n\\begin{matrix} \nF_{n+1} &#x26; F_n \\\\ \nF_n &#x26; F_{n-1} \n\\end{matrix}\n\\right)\n\\left(\n\\begin{matrix} \n1 &#x26; 1 \\\\ \n1 &#x26; 0 \n\\end{matrix}\n\\right) \\\\\n\n=\n\n\\left(\n\\begin{matrix} \nF_{n+1} + F_{n} &#x26; F_{n+1} \\\\ \nF_n + F_{n-1} &#x26; F_{n} \n\\end{matrix}\n\\right) \\\\\n\n=\n\\left(\n\\begin{matrix} \nF_{n+1} &#x26; F_n \\\\ \nF_n &#x26; F_{n-1} \n\\end{matrix}\n\\right)\n</div>\n<br>\n<p>このとき<span class=\"math math-inline\">\\left(\n\\begin{matrix} \n1 &#x26; 1 \\\\ \n1 &#x26; 0 \n\\end{matrix}\n\\right)</span>を<span class=\"math math-inline\">Q</span>とおくと、フィボナッチ数列の<span class=\"math math-inline\">N</span>項目は<span class=\"math math-inline\">Q^{n-1}</span>の1行1列目と等しい事が分かる。</p>\n<p>つまり、<span class=\"math math-inline\">F_n</span>を求めるには<span class=\"math math-inline\">Q_{n-1}</span>を求めればよいと言うことになる。</p>\n<br>\n<h2>再び再帰</h2>\n<br>\n<p>ではどうすれば<span class=\"math math-inline\">Q_{n-1}</span>を対数時間で求めることができるのだろうか。</p>\n<p>xのn乗というのは、<a href=\"https://en.wikipedia.org/wiki/Exponentiation_by_squaring\">Exponentiation by squaring</a>という手法を用いれば対数時間で求める事ができる事が知られており、次のように表すことができる。</p>\n<br>\n<div class=\"math math-display\">x^n = \n\\left\\{ \\begin{matrix}x(x^2)^{n-1 / 2}&#x26;(nが奇数のとき)\\\\ (x^2)^{n / 2}&#x26;(nが奇数のとき) \\end{matrix} \\right.</div>\n<br>\n<p>つまり、<span class=\"math math-inline\">Q_{n}</span>という行列を求めたければ<span class=\"math math-inline\">Q_{n / 2}</span>を求めればよく、<span class=\"math math-inline\">Q_{n / 2}</span>を求めたければ<span class=\"math math-inline\">Q_{n / 4}</span>を求めれば良いことになる。</p>\n<p>よって、時間計算量は<span class=\"math math-inline\">O(log N)</span>となる。</p>"}}},"contentfulPoem":null},"pageContext":{"slug":"fibonacci-matrx-python"}},"staticQueryHashes":["2463962953","3159585216"]}